from pprint import pprint
from pysnmp.hlapi import *

def walk(host, oid, community):
    
    snmp_ip_list = []
    for (errorIndication,
         errorStatus,
         errorIndex,
         varBinds) in nextCmd(SnmpEngine(), 
                              CommunityData(community),
                              UdpTransportTarget((host, 161)),
                              ContextData(),                                                           
                              ObjectType(ObjectIdentity(oid)),
                              lexicographicMode=False):
        if errorIndication:            
            print(errorIndication)
            break
        elif errorStatus:
            print('%s at %s' % (errorStatus.prettyPrint(),
                                errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))
            break
        else:
            for varBind in varBinds:                
                snmp_ip_list.append( str(varBind) )
    return snmp_ip_list
    
    
    
def get(host, oid, community):
    snmp_index_str = ''
    for (errorIndication,
     errorStatus,
     errorIndex,
     varBinds) in getCmd(SnmpEngine(),
                          CommunityData(community, mpModel=0),
                          UdpTransportTarget((host, 161)),
                          ContextData(),
                          ObjectType(ObjectIdentity( oid ))):
        if errorIndication or errorStatus:
            print(errorIndication or errorStatus)
            break
        else:
            for varBind in varBinds:
                snmp_index_str = str(varBind)  
                break
            break
    return snmp_index_str

################################################################

def inventory_ios_int_ipaddr(info):       
    yield '', None   
    

def check_ios_int_ipaddr(item, params, info):
    
    output_string = ''
    import re
    oid = '1.3.6.1.2.1.4.20.1.1'
    host_ip = '10.20.20.100'
    community = 'public'    
    ip_list = []
    index_dict = {} 
    
    walk_output = walk(host_ip,oid,community)
    
    for walk_output_element in walk_output:
        try:
            ip = re.search('= (.+?)$', walk_output_element).group(1)
            ip_list.append( ip )
        except AttributeError:
            # Si no encuentra la cadena:
            ip = 'No se han encontrado direcciones IP' # Gestion de error
    
    for ip_addr in ip_list:
        oid = '1.3.6.1.2.1.4.20.1.2.' + ip_addr        
        if_index_snmp =  get(host_ip , oid, community)
        if_index = re.search('= (.+?)$', if_index_snmp).group(1)                
        index_dict[if_index] = ip_addr        
    
    
    for index in index_dict:
        oid = '1.3.6.1.2.1.2.2.1.2.' + index
        ip = index_dict[index]
        if_descr_snmp = get(host_ip , oid, community)
        if_descr = re.search('= (.+?)$', if_descr_snmp).group(1)
        interface_info = if_descr + " - " + ip
        output_string += interface_info + " \n <br>"     
    
    return (0, output_string)
    


check_info["ios_int_ipaddr"] = {
    "check_function"        : check_ios_int_ipaddr,
    "inventory_function"    : inventory_ios_int_ipaddr,
    "service_description"   : "IP addresses",
    "snmp_info"             : ( ".1.3.6.1.2.1.4.20.1", ["1"] ),
}
